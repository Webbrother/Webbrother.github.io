{"version":3,"sources":["About.module.css","app/home/Home.module.scss","About.tsx","components/contact-info/ContactInfo.tsx","components/logo/Logo.tsx","app/home/Home.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","About","className","styles","about","ContactInfo","href","Logo","props","pathRef","React","createRef","onTransitionEnd","bind","this","animate","drawLogo","onAnimationEnd","current","length","getTotalLength","path","style","transition","strokeDasharray","strokeDashoffset","getBoundingClientRect","width","height","x","y","preserveAspectRatio","viewBox","ref","fill","stroke","strokeWidth","strokeLinecap","strokeMiterlimit","d","Component","defaultProps","Home","state","showLogo","hideLogo","setState","logoContainer","CSSTransition","appear","in","timeout","classNames","unmountOnExit","App","exact","component","to","Boolean","window","location","hostname","match","ReactGA","initialize","pageview","pathname","search","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,MAAQ,uB,mBCA1BD,EAAOC,QAAU,CAAC,cAAgB,8B,6PCGrBC,EAAkB,kBAC7B,yBAAKC,UAAWC,IAAOC,OACrB,wCACA,yC,uBCsBWC,G,MAzBK,WAClB,OACE,6BACE,uBAAGH,UAAU,OAAOI,KAAK,sCAAzB,+BAGA,uBAAGJ,UAAU,OAAOI,KAAK,qBAAzB,sBAGA,uBACEJ,UAAU,OACVI,KAAK,sDAFP,iBAMA,uBAAGJ,UAAU,OAAOI,KAAK,+CAAzB,YAGA,uBAAGJ,UAAU,OAAOI,KAAK,iCAAzB,aCfAC,E,YASJ,WAAYC,GAAoB,IAAD,8BAC7B,4CAAMA,KAHDC,QAAUC,IAAMC,YAKrB,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBAHM,E,iFAOzBC,KAAKN,MAAMO,SACbD,KAAKE,a,wCAKFF,KAAKN,MAAMO,SAGhBD,KAAKN,MAAMS,mB,iCAIX,GAAKH,KAAKL,SAAYK,KAAKL,QAAQS,QAAnC,CAIA,IAAMC,EAASL,KAAKL,QAAQS,QAAQE,iBAC9BC,EAAOP,KAAKL,QAAQS,QAG1BG,EAAKC,MAAMC,WAAa,OAExBF,EAAKC,MAAME,gBAAX,UAAgCL,EAAhC,YAA0CA,GAC1CE,EAAKC,MAAMG,iBAAX,UAAiCN,GAIjCE,EAAKK,wBAGLL,EAAKC,MAAMC,WAAa,iDAGxBF,EAAKC,MAAMG,iBAAmB,O,+BAI9B,OACE,6BACE,yBACEE,MAAM,OACNC,OAAO,OACPC,EAAE,MACFC,EAAE,MACFC,oBAAoB,iBACpBC,QAAQ,eAER,0BACEC,IAAKnB,KAAKL,QACVyB,KAAK,OACLC,OAAO,UACPC,YAAY,IACZC,cAAc,QACdC,iBAAiB,KACjB1B,gBAAiBE,KAAKF,gBACtB2B,EAAE,4d,GAxEKC,aAAbjC,EACUkC,aAAe,CAC3B1B,SAAS,EAETE,eAAgB,cAgFLV,Q,iBChCAmC,E,YA5Cb,WAAYlC,GAAmB,IAAD,8BAC5B,4CAAMA,KAEDmC,MAAQ,CACXC,UAAU,GAGZ,EAAKC,SAAW,EAAKA,SAAShC,KAAd,gBAPY,E,wEAW5BC,KAAKgC,SAAS,CACZF,UAAU,M,+BAKZ,OACE,oCACE,yBAAK1C,UAAWC,IAAO4C,eACrB,kBAACC,EAAA,EAAD,CACEC,QAAQ,EACRC,GAAIpC,KAAK6B,MAAMC,SACfO,QA1Bc,IA2BdC,WAAW,OACXC,eAAe,GAEf,kBAAC,EAAD,CAAMtC,SAAS,EAAME,eAAgBH,KAAK+B,aAG9C,kBAACG,EAAA,EAAD,CACEC,QAAQ,EACRC,IAAKpC,KAAK6B,MAAMC,SAChBO,QApCgB,IAqChBC,WAAW,OACXC,eAAe,GAEf,kBAAC,EAAD,Y,GAtCSb,aCSJc,E,iLAdX,OACE,yBAAKpD,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmB,KAAK,IAAIkC,OAAO,EAAMC,UAAWd,IACxC,kBAAC,IAAD,CAAOrB,KAAK,SAASkC,OAAO,EAAMC,UAAWvD,IAC7C,kBAAC,IAAD,CAAUwD,GAAG,a,GARPjB,a,MCMEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAAQC,WAAW,kBACnBD,IAAQE,SAASN,OAAOC,SAASM,SAAWP,OAAOC,SAASO,QAE5DC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD+H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5dc82361.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"about\":\"About_about__6ZqrC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logoContainer\":\"Home_logoContainer__2Bhl1\"};","import React from \"react\";\n\nimport styles from \"./About.module.css\";\n\nexport const About: React.FC = () => (\n  <div className={styles.about}>\n    <h1>About me</h1>\n    <p>I'm from</p>\n  </div>\n);\n","import React from \"react\";\n\nimport \"./ContactInfo.scss\";\n\nconst ContactInfo = () => {\n  return (\n    <div>\n      <a className=\"link\" href=\"mailto:developer.komarov@gmail.com\">\n        developer.komarov@gmail.com\n      </a>\n      <a className=\"link\" href=\"skype:v-a-komarov\">\n        Skype: v-a-komarov\n      </a>\n      <a\n        className=\"link\"\n        href=\"https://stackoverflow.com/users/2179748/webbrother\"\n      >\n        Stackoverflow\n      </a>\n      <a className=\"link\" href=\"https://www.linkedin.com/in/vitaly-komarov/\">\n        LinkedIn\n      </a>\n      <a className=\"link\" href=\"https://github.com/Webbrother\">\n        Github\n      </a>\n    </div>\n  );\n};\n\nexport default ContactInfo;\n","import React, { Component } from \"react\";\n\ntype TLogoProps = {\n  animate: boolean;\n  onAnimationEnd: () => void;\n};\n\nclass Logo extends Component<TLogoProps> {\n  public static defaultProps = {\n    animate: false,\n    // tslint:disable-next-line:no-empty\n    onAnimationEnd: () => {}\n  };\n\n  public pathRef = React.createRef<SVGPathElement>();\n\n  constructor(props: TLogoProps) {\n    super(props);\n\n    this.onTransitionEnd = this.onTransitionEnd.bind(this);\n  }\n\n  public componentDidMount() {\n    if (this.props.animate) {\n      this.drawLogo();\n    }\n  }\n\n  public onTransitionEnd() {\n    if (!this.props.animate) {\n      return;\n    }\n    this.props.onAnimationEnd();\n  }\n\n  public drawLogo() {\n    if (!this.pathRef || !this.pathRef.current) {\n      return;\n    }\n\n    const length = this.pathRef.current.getTotalLength();\n    const path = this.pathRef.current;\n\n    // Clear any previous transition\n    path.style.transition = \"none\";\n    // Set up the starting positions\n    path.style.strokeDasharray = `${length} ${length}`;\n    path.style.strokeDashoffset = `${length}`;\n\n    // Trigger a layout so styles are calculated & the browser\n    // picks up the starting position before animating\n    path.getBoundingClientRect();\n\n    // Define our transition\n    path.style.transition = \"stroke-dashoffset 4s cubic-bezier(.6,.00,.4,1)\";\n    // path.style.transition = \"stroke-dashoffset 2s ease-in-out\";\n    // Go!\n    path.style.strokeDashoffset = \"0\";\n  }\n\n  public render() {\n    return (\n      <div>\n        <svg\n          width=\"100%\"\n          height=\"100%\"\n          x=\"0px\"\n          y=\"0px\"\n          preserveAspectRatio=\"xMidYMin slice\"\n          viewBox=\"0 0 490 280\"\n        >\n          <path\n            ref={this.pathRef}\n            fill=\"none\"\n            stroke=\"#000000\"\n            strokeWidth=\"8\"\n            strokeLinecap=\"round\"\n            strokeMiterlimit=\"10\"\n            onTransitionEnd={this.onTransitionEnd}\n            d=\"M4.709,30.802\n        \t    l30.583,218.397C37.385,263.998,50.053,275,65,275s27.615-11.002,29.709-25.802l30.583-218.397C127.385,16.002,140.053,5,155,5\n        \t    s27.615,11.002,29.709,25.802l30.583,218.397C217.385,263.998,230.053,275,245,275c14.947,0,27.615-11.002,29.709-25.802\n        \t    l30.583-218.397c2.205-15.597,16.097-26.833,31.811-25.728C352.816,6.179,364.999,19.248,365,35v60c0,16.569,13.431,30,30,30h60\n        \t    c16.569,0,30,13.431,30,30v90c0,16.569-13.431,30-30,30h-60c-16.569,0-30-13.431-30-30v-45\"\n          />\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default Logo;\n","import React, { Component } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\n\nimport ContactInfo from \"../../components/contact-info/ContactInfo\";\nimport Logo from \"../../components/logo/Logo\";\nimport styles from \"./Home.module.scss\";\n\ntype TAppProps = {};\ntype TAppState = {\n  showLogo: boolean;\n};\n\nconst animationDuration = 1000;\n\nclass Home extends Component<TAppProps, TAppState> {\n  constructor(props: TAppProps) {\n    super(props);\n\n    this.state = {\n      showLogo: true\n    };\n\n    this.hideLogo = this.hideLogo.bind(this);\n  }\n\n  public hideLogo() {\n    this.setState({\n      showLogo: false\n    });\n  }\n\n  public render() {\n    return (\n      <>\n        <div className={styles.logoContainer}>\n          <CSSTransition\n            appear={true}\n            in={this.state.showLogo}\n            timeout={animationDuration}\n            classNames=\"fade\"\n            unmountOnExit={true}\n          >\n            <Logo animate={true} onAnimationEnd={this.hideLogo} />\n          </CSSTransition>\n        </div>\n        <CSSTransition\n          appear={true}\n          in={!this.state.showLogo}\n          timeout={animationDuration}\n          classNames=\"fade\"\n          unmountOnExit={true}\n        >\n          <ContactInfo />\n        </CSSTransition>\n      </>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport { About } from \"../About\";\n\nimport \"./App.scss\";\nimport Home from \"./home/Home\";\n\nclass App extends Component {\n  public render() {\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <Switch>\n            <Route path=\"/\" exact={true} component={Home} />\n            <Route path=\"/about\" exact={true} component={About} />\n            <Redirect to=\"/\" />\n          </Switch>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/* tslint:disable:no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactGA from \"react-ga\";\nimport App from \"./app/App\";\nimport \"./index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactGA.initialize(\"UA-112676131-1\");\nReactGA.pageview(window.location.pathname + window.location.search);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}